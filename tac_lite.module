<?php
/**
 * @file
 *   Control access to site content based on taxonomy, roles and users.
 *
 */

/**
 * Implements hook_permission().
 */
function tac_lite_permission() {
  return array(
    'administer tac_lite' => array(
      'title' => t('Administer Taxonomy Access Control Lite'),
    ),
  );
}

/**
 * Implements hook_config_info().
 */
function tac_lite_config_info() {
  $prefixes['tac_lite.settings'] = array(
    'label' => t('Taxonomy Access Control Lite settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_menu().
 */
function tac_lite_menu() {
  global $user;
  $config = config('tac_lite.settings');
  $items = array();

  $items['admin/config/people/tac_lite'] = array(
    'title' => 'Access by Taxonomy',
    'description' => "Taxonomy-based permissions by tac_lite",
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('tac_lite_admin_settings'),
    'weight' => 1, // After 'roles' tab.
    'access arguments' => array('administer tac_lite'),
  );

  $items['admin/config/people/tac_lite/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
    'access arguments' => array('administer tac_lite'),
  );

  $schemes = $config->get('schemes');
  for ($i = 1; $i <= $schemes; $i++) {
    $scheme = $config->get('config_scheme_'. $i);
    if ($scheme) {
      $title = $scheme['name'];
    } else {
      $title = "Scheme $i";
    }
    $items['admin/config/people/tac_lite/scheme_' . $i] = array(
      'title' => $title,
      'page callback' => 'tac_lite_admin_settings_scheme',
      'page arguments' => array((string) $i),
      'type' => MENU_LOCAL_TASK,
      'weight' => $i,
      'access arguments' => array('administer tac_lite'),
    );
  }

  return $items;
}

/**
 * Returns the settings form
 */
function tac_lite_admin_settings($form, &$form_state) {
  $all_vocabularies = taxonomy_get_vocabularies();
  $config = config('tac_lite.settings');

  $form['#config'] = 'tac_lite.settings';
  if (!count($all_vocabularies)) {
    $form['body'] = array(
      '#type' => 'markup',
      '#markup' => t('You must <a href="!url">create a vocabulary</a> before you can use TAC Lite.',
                array('!url' => url('admin/structure/taxonomy/add/vocabulary'))),
    );
    return $form;
  }
  else {
    $options = array();
    foreach ($all_vocabularies as $machine_name => $vocab) {
      $options[$machine_name] = $vocab->name;
    }

    $form['categories'] = array(
      '#type' => 'select',
      '#title' => t('Vocabularies'),
      '#default_value' => $config->get('categories'),
      '#options' => $options,
      '#description' => t('Select one or more vocabularies to control privacy.  <br/>Use caution with hierarchical (nested) taxonomies as <em>visibility</em> settings may cause problems on node edit forms.<br/>Do not select free tagging vocabularies, they are not supported.'),
      '#multiple' => TRUE,
      '#required' => TRUE,
    );

    $scheme_options = array();
    // Currently only view, edit, delete permissions possible, so 7
    // permutations will be more than enough.
    for ($i = 1; $i < 8; $i++)
      $scheme_options[$i] = $i;
    $form['schemes'] = array(
      '#type' => 'select',
      '#title' => t('Number of Schemes'),
      '#description' => t('Each scheme allows for a different set of permissions.  For example, use scheme 1 for read-only permission; scheme 2 for read and update; scheme 3 for delete; etc.  Additional schemes increase the size of your node_access table, so use no more than you need.'),
      '#default_value' => $config->get('schemes'),
      '#options' => $scheme_options,
      '#required' => TRUE,
    );

    $form['rebuild'] = array(
      '#type' => 'checkbox',
      '#title' => t('Rebuild content permissions now'),
      '#default_value' => FALSE, // Default false because usually only needed after scheme has been changed.
      '#description' => t('Do this once, after you have fully configured access by taxonomy.'),
      '#weight' => 9,
    );

    $ret = system_settings_form($form);
    // Special handling is required when this form is submitted.
    $ret['#submit'][] = '_tac_lite_admin_settings_submit';
    return $ret;
  }
}

/**
 * This form submit callback ensures that the form values are saved, and also
 * the node access database table is rebuilt.
 */
function _tac_lite_admin_settings_submit($form, &$form_state) {
  $rebuild = $form_state['values']['rebuild'];

  // Rebuild the node_access table.
  if ($rebuild) {
    node_access_rebuild(TRUE);
  }
  else {
    backdrop_set_message(t('Do not forget to <a href=!url>rebuild node access permissions</a> after you have configured taxonomy-based access.', array(
      '!url' => url('admin/reports/status/rebuild'),
    )), 'warning');
  }

  // And rebuild menus, in case the number of schemes has changed.
  menu_rebuild();

  config_clear('tac_lite.settings', 'rebuild'); // We don't need to store this.
}

/**
 * Menu callback to create a form for each scheme.
 * @param $i
 *   The index of the scheme that we will be creating a form for. Passed in as a page argument from the menu.
 */
function tac_lite_admin_settings_scheme($i) {
  return backdrop_get_form('tac_lite_admin_scheme_form', $i);
}

/**
 * Helper function.
 */
function _tac_lite_scheme_info($scheme) {
  $config = config('tac_lite.settings');
  // Different defaults for scheme 1.
  if ($scheme === 1) {
    $defaults = array(
      'name' => t('read'),
      'perms' => array('grant_view'),
    );
  }
  else {
    $defaults = array(
      'name' => NULL,
      'perms' => array(),
    );
  }
  $scheme_info = $config->get('config_scheme_' . $scheme);
  if (empty($scheme_info)) {
    $scheme_info = $defaults;
  }

  // Merge defaults, for backward compatibility.
  $scheme_info += array(
    'term_visibility' => (isset($scheme_info['perms']['grant_view']) && $scheme_info['perms']['grant_view']),
    'unpublished' => FALSE,
  );

  // For backward compatability, use naming convention for scheme 1.
  if ($scheme == 1) {
    $scheme_info['realm'] = 'tac_lite';
  }
  else {
    $scheme_info['realm'] = 'tac_lite_scheme_' . $scheme;
  }

  return $scheme_info;
}

/**
 * Returns the form for role-based privileges.
 */
function tac_lite_admin_scheme_form($form, $form_state, $i) {
  $config = config('tac_lite.settings');
  $selected_vocabularies = $config->get('categories');
  $roles = user_roles();

  $scheme_info = _tac_lite_scheme_info($i);
  $form['#tac_lite_scheme_info'] = $scheme_info;
  $form['#config'] = 'tac_lite.settings';
  if (count($selected_vocabularies)) {
    $form['config_scheme_' . $i] = array('#tree' => TRUE);
    $form['config_scheme_' . $i]['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Scheme name'),
      '#description' => t('A human-readable name for administrators to see. For example, \'read\' or \'read and write\'.'),
      '#default_value' => $scheme_info['name'],
      '#required' => TRUE,
    );
    // Currently, only view, update and delete are supported by node_access.
    $options = array(
      'grant_view' => 'view',
      'grant_update' => 'update',
      'grant_delete' => 'delete',
    );
    $form['config_scheme_' . $i]['perms'] = array(
      '#type' => 'select',
      '#title' => t('Permissions'),
      '#multiple' => TRUE,
      '#options' => $options,
      '#default_value' => $scheme_info['perms'],
      '#description' => t('Select which permissions are granted by this scheme.  <br/>Note when granting update, it is best to enable visibility on all terms.  Otherwise a user may unknowingly remove invisible terms while editing a node.'),
      '#required' => FALSE,
    );

    $form['config_scheme_' . $i]['unpublished'] = array(
      '#type' => 'checkbox',
      '#title' => t('Apply to unpublished content'),
      '#description' => t('If checked, permissions in this scheme will apply to unpublished content.  If this scheme includes the view permission, then <strong>unpublished nodes will be visible</strong> to users whose roles would grant them access to the published node.'),
      '#default_value' => $scheme_info['unpublished'],
    );

    $form['config_scheme_' . $i]['term_visibility'] = array(
      '#type' => 'checkbox',
      '#title' => t('Visibility'),
      '#description' => t('If checked, this scheme determines whether a user can view <strong>terms</strong>.  Note the <em>view</em> permission in the select field above refers to <strong>node</strong> visibility.  This checkbox refers to <strong>term</strong> visibility, for example in a content edit form or tag cloud.'),
      '#default_value' => $scheme_info['term_visibility'],
    );

    $form['helptext'] = array(
      '#type' => 'markup',
      '#markup' => t('To grant to an individual user, visit the <em>access by taxonomy</em> tab on the account edit page.'),
      '#prefix' => '<p>',
      '#suffix' => '</p>',
    );
    $form['helptext2'] = array(
      '#type' => 'markup',
      '#markup' => t('To grant by role, select the terms below.'),
      '#prefix' => '<p>',
      '#suffix' => '</p>',
    );
    $all_vocabularies = taxonomy_get_vocabularies();
    $all_defaults = $config->get('grants_scheme_' . $i);
    $all_defaults = $all_defaults ? $all_defaults : array();
    $form['grants_scheme_' . $i] = array('#tree' => TRUE);
    foreach ($roles as $role_name) {
      $form['grants_scheme_' . $i][$role_name] = array(
        '#type' => 'fieldset',
        '#tree' => TRUE,
        '#title' => check_plain(t('Grant permission by role: !role', array('!role' => $role_name))),
        '#description' => t(''),
        '#collapsible' => TRUE,
      );

      $defaults = isset($all_defaults[$role_name]) ? $all_defaults[$role_name] : NULL;
      $has_permissions = FALSE;
      foreach ($selected_vocabularies as $selected_vocabulary) {
        $default_values = isset($defaults[$selected_vocabulary]) ? $defaults[$selected_vocabulary] : NULL;
        $form['grants_scheme_' . $i][$role_name][$selected_vocabulary] = _tac_lite_term_select($all_vocabularies[$selected_vocabulary], $default_values);
        $has_permissions = ($has_permissions || !empty($defaults[$selected_vocabulary])) ? TRUE : FALSE;
      }
      $form['grants_scheme_' . $i][$role_name]['#collapsed'] = !$has_permissions;
    }

    $form['rebuild'] = array(
      '#type' => 'checkbox',
      '#title' => t('Rebuild content permissions now'),
      '#default_value' => FALSE, // Default false because usually only needed after scheme has been changed.
      '#description' => t('Do this once, after you have fully configured access by taxonomy.'),
      '#weight' => 9,
    );

    $form['#submit'][] = 'tac_lite_admin_scheme_form_submit';
    return system_settings_form($form);
  }
  else {
    $form['help'] = array(
      '#type' => 'markup',
      '#prefix' => '<p>', '#suffix' => '</p>',
      '#markup' => t('First, select one or more vocabularies on the <a href=!url>settings tab</a>. Then, return to this page to complete configuration.', array('!url' => url('admin/config/people/tac_lite/settings'))));
    return $form;
  }
}

/**
 * Submit function for admin settings form to rebuild the menu.
 */
function tac_lite_admin_scheme_form_submit($form, &$form_state) {
  state_set('menu_rebuild_needed', TRUE);

  // Rebuild the node_access table.
  if ($form_state['values']['rebuild']) {
    node_access_rebuild(TRUE);
  }
  else {
    backdrop_set_message(t('Do not forget to <a href=!url>rebuild node access permissions</a> after you have configured taxonomy-based access.', array(
      '!url' => url('admin/reports/status/rebuild'),
    )), 'warning');
  }
  config_clear('tac_lite.settings', 'rebuild'); // We don't need to store this.
}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 *   Nested array of form elements that comprise the form.
 * @param $form_state
 *   A keyed array containing the current state of the form. The arguments that backdrop_get_form() was originally called with are available in the array $form_state['build_info']['args'].
 * @param $form_id
 *   String representing the name of the form itself. Typically this is the name of the function that generated the form.
 *
 */
function tac_lite_form_alter(&$form, &$form_state, $form_id){
  $config = config('tac_lite.settings');
  // Catch for the tac_lite category on the user edit form.
  if ($form_id == 'user_profile_form' && user_access('administer users')) {
    $all_vocabularies = taxonomy_get_vocabularies();
    $selected_vocabularies = $config->get('categories');
    if (is_array($selected_vocabularies) && count($selected_vocabularies)) {
      $form['tac_lite'] = array(
        '#type' => 'fieldset',
        '#title' => t('Per-user access by taxonomy'),
        '#weight' => 5,
        '#tree' => TRUE,
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#group' => 'additional_settings',
        '#attributes' => array('class' => array('tac-lite--user-settings')),
      );
      for ($i = 1; $i <= $config->get('schemes'); $i++) {
        $scheme_info = _tac_lite_scheme_info($i);
        $realm = $scheme_info['realm'];
        if ($scheme_info['name']) {
          $perms = $scheme_info['perms'];
          if ($scheme_info['term_visibility']) {
            $perms[] = t('term visibility');
          }
          $form['tac_lite'][$realm] = array(
            '#type' => 'fieldset',
            '#title' => $scheme_info['name'],
            '#description' => t('This scheme controls %perms.', array('%perms' => implode(' and ', $perms))),
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
            '#weight' => 2,
            '#attributes' => array('class' => array('tac-lite--scheme')),
          );
          // Create a form element for each vocabulary.
          foreach ($selected_vocabularies as $selected_vocabulary) {
            // TODO: Should we be looking in form_state also for the default value?
            // (Might only be necessary if we are adding in custom validation?)
            $default_values = array();
            if (!empty($form['#user']->data[$realm])) {
              if (isset($form['#user']->data[$realm][$selected_vocabulary])) {
                $default_values = $form['#user']->data[$realm][$selected_vocabulary];
              }
            }
            $form['tac_lite'][$realm][$selected_vocabulary] = _tac_lite_term_select($all_vocabularies[$selected_vocabulary], $default_values);
            $form['tac_lite'][$realm][$selected_vocabulary]['#description'] = t('Grant permission to this user by selecting terms.  Note that permissions are in addition to those granted based on user roles.');
          }
        }
      }
      $form['tac_lite'][0] = array(
        '#type' => 'markup',
        '#markup' => '<p>' . t('You may grant this user access based on the schemes and terms below.  These permissions are in addition to <a href="!url">role based grants on scheme settings pages</a>.',
                  array('!url' => url('admin/config/people/tac_lite/scheme_1'))) . "</p>\n",
        '#weight' => -1,
      );
    }
    else {
      // TODO: Do we need to handle the situation where no vocabularies have been set up yet / none have been assigned to tac_lite?
    }
    $form['#attached']['js'][] = backdrop_get_path('module', 'tac_lite') . '/js/tac_lite.admin.js';
    return $form;
  }
}

/**
 * Implements hook_user_presave().
 *
 * Move the tac_lite data into the data object
 * @param $account
 *   The user object on which the operation is performed.
 */
function tac_lite_user_presave(&$account) {
  // Go through each scheme and copy the form value into the data element.
  for ($i = 1; $i <= config_get('tac_lite.settings', 'schemes'); $i++) {
    $scheme_info = _tac_lite_scheme_info($i);
    $realm = $scheme_info['realm'];
    if ($realm && isset($account->{$realm})) {
      $account->data[$realm] = $account->tac_lite[$realm];
    }
  }
}

/**
 * Implements hook_node_access_records().
 *
 * We are given a node and we return records for the node_access table.  In
 * our case, we inpect the node's taxonomy and grant permissions based on the
 * terms.
 */
function tac_lite_node_access_records($node) {
  // Get the tids we care about that are assigned to this node.
  $tids = _tac_lite_get_terms($node);

  if (!count($tids)) {
    // No relevant terms found.
    // In drupal 4-7 we had to write a row into the database. In drupal 5 and later, it should be safe to do nothing.
  }
  else {
    // If we're here, the node has terms associated with it which restrict
    // access to the node.
    $grants = array();
    for ($i = 1; $i <= config_get('tac_lite.settings', 'schemes'); $i++) {
      $scheme_info = _tac_lite_scheme_info($i);
      // Only apply grants to published nodes, or unpublished nodes if requested in the scheme.
      if ($node->status || $scheme_info['unpublished']) {
        foreach ($tids as $tid) {
          $grant = array(
            'realm' => $scheme_info['realm'],
            'gid' => $tid, // Use term id as grant id.
            'grant_view' => 0,
            'grant_update' => 0,
            'grant_delete' => 0,
            'priority' => 0,
          );
          foreach ($scheme_info['perms'] as $perm) {
            $grant[$perm] = TRUE;
          }
          $grants[] = $grant;
        }
      }
    }
    return $grants;
  }
}

/**
 * Gets terms from a node that belong to vocabularies selected for use by tac_lite
 *
 * @param $node
 *   A node object
 * @return
 *   An array of term ids
 */
function _tac_lite_get_terms($node) {
  $tids = array();

  // Get the vocabularies that tac_lite cares about.
  $selected_vocabularies = config_get('tac_lite.settings', 'categories');
  if ($selected_vocabularies) {
    // Load all terms found in term reference fields.
    // This logic should work for all nodes (published or not).
    $terms_by_vocabulary = tac_lite_node_get_terms($node);
    if (!empty($terms_by_vocabulary)) {
      foreach ($selected_vocabularies as $selected_vocabulary) {
        if (!empty($terms_by_vocabulary[$selected_vocabulary])) {
          foreach ($terms_by_vocabulary[$selected_vocabulary] as $tid => $term) {
            $tids[$tid] = $tid;
          }
        }
      }
    }

    // The logic above should have all terms already, but just in case we use
    // the "original" logic below.  The taxonomy module stopped writing to the
    // taxonomy_index for unpublished nodes, so this works only for published
    // nodes.
    $query = db_select('taxonomy_index', 'r');
    $t_alias = $query->join('taxonomy_term_data', 't', 'r.tid = t.tid');
    $query->fields( $t_alias );
    $query->condition("r.nid", $node->nid);
    $query->condition("t.vocabulary", $selected_vocabularies, 'IN');
    $result = $query->execute();
    foreach ($result as $term) {
      if (empty($tids[$term->tid])) {
        watchdog('tac_lite', 'Unexpected term id %tid associated with !node.  Please report this to !url.', array(
          '%tid' => $term->tid,
          '!node' => l($node->title, 'node/' . $node->nid),
          '!url' => 'https://drupal.org/node/1918272',
        ), WATCHDOG_DEBUG);
      }
      $tids[$term->tid] = $term->tid;
    }
  }
  elseif (user_access('administer tac_lite')) {
    backdrop_set_message(t('tac_lite.module enabled, but not <a href=!admin_url>configured</a>. No tac_lite terms associated with %title.', array(
      '!admin_url' => url('admin/config/people/tac_lite'),
      '%title' => $node->title,
    )));
  }

  return $tids;
}

/**
 * In Drupal 6.x, there was taxonomy_node_get_terms(). Backdrop should
 * provide the same feature, but doesn't.  Here is our workaround, based on
 * https://drupal.org/comment/5573176#comment-5573176.
 *
 * We organize our data structure by vocabulary and tid.
 */
function tac_lite_node_get_terms($node) {
  $terms = &backdrop_static(__FUNCTION__);

  if (!isset($terms[$node->nid])) {
    // Get tids from all taxonomy_term_reference fields.
    $fields = field_info_fields();
    $tids = array();
    foreach ($fields as $field_name => $field) {
      // Our goal is to get all terms, regardless of language, associated with the node.  Does the code below do that?
      if ($field['type'] == 'taxonomy_term_reference' && field_info_instance('node', $field_name, $node->type)) {
        if (($items = field_get_items('node', $node, $field_name)) && is_array($items)) {
          foreach ($items as $item) {
            // Sometimes $item contains only tid, sometimes entire term.  Thanks
            // Backdrop for remaining mysterious!
            if (!empty($item['taxonomy_term'])) {
              $term = $item['taxonomy_term'];
              $terms[$node->nid][$term->vocabulary][$term->tid] = $term;
            }
            else {
              // Save term IDs for bulk loading later.
              $tids[] = $item['tid'];
            }
          }
        }
      }
    }
    // Bulk load terms from term IDs.
    if (!empty($tids)) {
      $terms_loaded = taxonomy_term_load_multiple($tids);
      foreach ($terms_loaded as $term) {
        $terms[$node->nid][$term->vocabulary][$term->tid] = $term;
      }
    }
  }

  return isset($terms[$node->nid]) ? $terms[$node->nid] : FALSE;
}

/**
 * Helper function to build a taxonomy term select element for a form.
 *
 * @param $vocabulary
 *   A vocabulary object containing a machine_name and name.
 * @param $default_values
 *   An array of values to use for the default_value argument for this form element.
 */
function _tac_lite_term_select($vocabulary, $default_values = array()) {
  $tree = taxonomy_get_tree($vocabulary->machine_name);
  $options = array(0 => '<' . t('none') . '>');
  if ($tree) {
    foreach ($tree as $term) {
      $choice = new stdClass();
      $choice->option = array(
        $term->tid => str_repeat('-', $term->depth) . $term->name,
      );
      $options[] = $choice;
    }
  }
  $field_array = array(
    '#type' => 'select',
    '#title' => $vocabulary->name,
    '#default_value' => $default_values,
    '#options' => $options,
    '#multiple' => TRUE,
    '#description' => $vocabulary->description,
    '#attributes' => array('class' => array('tac-lite--term-select')),
  );
  return $field_array;
}

/**
 * Return the term ids of terms this user is allowed to access.
 *
 * Users are granted access to terms either because of who they are,
 * or because of the roles they have.
 */
function _tac_lite_user_tids($account, $scheme) {
  // Grant id 0 is reserved for nodes which were not given a grant id when they
  // were created. By adding 0 to the grant id, we let the user view those nodes.
  $grants = array(0);
  $scheme_info = _tac_lite_scheme_info($scheme);
  $realm = $scheme_info['realm'];
  if (isset($account->data[$realm]) && count($account->data[$realm])) {
    // $account->$realm is array. Keys are vocabulary machine names, values are array of tids within that vocabulary, to which the user has access.
    foreach ($account->data[$realm] as $tids) {
      if (count($tids)) {
        $grants = array_merge($grants, $tids);
      }
    }
  }

  // Add per-role grants in addition to per-user grants.
  $defaults = config_get('tac_lite.settings', 'grants_scheme_' . $scheme);
  $defaults = $defaults ? $defaults : array();
  foreach ($account->roles as $role_name) {
    if (isset($defaults[$role_name]) && count($defaults[$role_name])) {
      foreach ($defaults[$role_name] as $tids) {
        if (count($tids)) {
          $grants = array_merge($grants, $tids);
        }
      }
    }
  }

  // Because of some flakyness in the form API and the form we insert under
  // user settings, we may have a bogus entry with vocabulary set
  // to ''. Here we make sure not to return that.
  unset($grants['']);

  return $grants;
}

/**
 * Implements hook_node_grants().
 *
 * Returns any grants which may give the user permission to perform the
 * requested op.
 */
function tac_lite_node_grants($account, $op) {
  $grants = &backdrop_static(__FUNCTION__);

  if (!isset($grants[$account->uid][$op])) {
    $user_grants = array();
    for ($i = 1; $i <= config_get('tac_lite.settings', 'schemes'); $i++) {
      $scheme_info = _tac_lite_scheme_info($i);
      if (in_array('grant_' . $op, $scheme_info['perms'])) {
        $user_grants[$scheme_info['realm']] = _tac_lite_user_tids($account, $i);
      }
    }
    $grants[$account->uid][$op] = $user_grants;
  }

  return $grants[$account->uid][$op];
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Acts on queries that list terms (generally these should be tagged with 'term_access')
 * to remove any terms that this user should not be able to see.
 */
function tac_lite_query_term_access_alter(QueryAlterableInterface $query) {
  global $user;
  $config = config('tac_lite.settings');

  // If this user has administer rights, don't filter.
  if (user_access('administer tac_lite')) {
    return;
  }

  // Get our vocabularies and schemes from config. Return if we have none.
  $selected_vocabularies = $config->get('categories');
  $schemes = $config->get('schemes');
  if (!$selected_vocabularies || !count($selected_vocabularies) || !$schemes) {
    return;
  }

  // The terms this user is allowed to see.
  $term_visibility = FALSE;
  $tids = array();
  for ($i = 1; $i <= $schemes; $i++) {
    $scheme_info = _tac_lite_scheme_info($i);
    if ($scheme_info['term_visibility']) {
      $tids = array_merge($tids, _tac_lite_user_tids($user, $i));
      $term_visibility = TRUE;
    }
  }

  if ($term_visibility) {
    // HELP: What is the proper way to find the alias of the primary table here?
    $primary_table = '';
    $t = $query->getTables();
    foreach ($t as $key => $info) {
      if (!$info['join type']) {
        $primary_table = $info['alias'];
      }
    }

    // Prevent query from finding terms the current user does not have permission to see.
    $query->leftJoin('taxonomy_term_data', 'tac_td', $primary_table . '.tid = tac_td.tid');
    $or = db_or();
    $or->condition($primary_table . '.tid', $tids, 'IN');
    $or->condition('tac_td.vocabulary', $selected_vocabularies, 'NOT IN');
    $query->condition($or);
  }
}
